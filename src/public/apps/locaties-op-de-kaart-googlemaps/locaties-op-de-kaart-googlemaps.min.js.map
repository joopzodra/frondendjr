{"version":3,"sources":["src/locaties-op-de-kaart-googlemaps/locaties-op-de-kaart-googlemaps.ts"],"names":["initMap","capitalize","string","charAt","toUpperCase","slice","presentData","res","json","JSON","parse","features","categoriesSet","map","feature","properties","SOORT","reduce","a","b","indexOf","push","forEach","categorie","option","document","createElement","selectElement","appendChild","setAttribute","labelDict","textContent","onSelectChange","target","value","createSelectMenu","event","currentMarkers","marker","setMap","currentInfoWindows","selectedValue","selectedFeatures","filter","coords","geometry","coordinates","latLng","google","maps","LatLng","Marker","position","infoWindowContent","NAAM","ADRES","infowindow","InfoWindow","content","addListener","currentOpenInfoWindow","close","open","previousButtons","querySelectorAll","Array","prototype","call","button","parentNode","removeChild","i","className","list","innerHTML","addEventListener","location","listModal","style","display","panTo","setZoom","goToFeature","listSelectedFeatures","super","slager","bakker","vis","groenten","kaas","dranken","toko","koffie","biologisch","markt","viz","getElementById","Map","zoom","center","lat","lng","mapTypeControl","selectControlDiv","addDomListener","controls","ControlPosition","TOP_LEFT","req","XMLHttpRequest","onreadystatechange","readyState","status","responseText","console","log","send","id","listModalContent","listContainer","closeSpan"],"mappings":"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","file":"locaties-op-de-kaart-googlemaps.min.js","sourcesContent":["/* initMap is called by the googlemaps script in the head of the html file */\nfunction initMap() {\n\n  /* Helpers */\n  interface Feature { type: string, geometry: any, properties: { ADRES: string, NAAM: string, SOORT: string } }\n\n  const labelDict = {\n    super: 'supermarkt',\n    slager: 'slager',\n    bakker: 'bakker, banketbakker',\n    vis: 'vis',\n    groenten: 'groenten en fruit',\n    kaas: 'kaas',\n    dranken: 'slijterij',\n    toko: 'toko',\n    koffie: 'koffie en thee',\n    biologisch: 'biologische voeding',\n    markt: 'markt'\n  };\n\n  function capitalize(string: string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /* Add the map */\n  const viz = document.getElementById('viz')\n\n  const map = new google.maps.Map(viz, {\n    zoom: 14,\n    center: { lat: 51.974, lng: 5.667 },\n    mapTypeControl: false\n  });\n\n  /* Create div element for a modal in which we can list the selected items. */\n  const listModal = document.createElement('div')\n\n  /*  Create googelmaps custom control with a select element and a button to display the modal. */\n  const selectControlDiv = document.createElement('div');\n  selectControlDiv.className = 'select-control';\n\n  const selectElement = document.createElement('select');\n  selectControlDiv.appendChild(selectElement);\n  google.maps.event.addDomListener(selectElement, 'change', onSelectChange);\n\n  const button = document.createElement('button');\n  button.className = 'select-button';\n  button.textContent = 'Toon selectie in lijst';\n  selectControlDiv.appendChild(button);\n  google.maps.event.addDomListener(button, 'click', () => listModal.style.display = 'block');\n\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(selectControlDiv);\n\n  /* Get the data */\n  const req = new XMLHttpRequest();\n  req.open('GET', 'locaties-op-de-kaart.geojson', true);\n  req.onreadystatechange = function() {\n    if (req.readyState === 4) {\n      if (req.status === 200) {\n        presentData(req.responseText);\n      } else {\n        console.log('Error ' + req.status + ', text: ' + req.responseText);\n      }\n    }\n  };\n  req.send();\n\n  /* Declare variable that will make data globally available */\n  let features: Feature[];\n\n  /* Make the data  available and call createSelectMenu */\n  function presentData(res: string) {\n    const json = JSON.parse(res);\n    features = json.features;\n    createSelectMenu();\n  }\n\n  /* Create the select menu and initialize it */\n  function createSelectMenu() {\n    const categories = features.map(feature => feature.properties.SOORT);\n    const categoriesSet = categories.reduce((a, b) => {\n      if (a.indexOf(b) < 0) {\n        a.push(b)\n      };\n      return a;\n    }, []);\n    categoriesSet.forEach(categorie => {\n      const option = document.createElement('option');\n      selectElement.appendChild(option);\n      option.setAttribute('value', categorie);\n      if ((<any>labelDict)[categorie]) {\n        option.textContent = capitalize((<any>labelDict)[categorie]);\n      } else {\n        option.textContent = capitalize(categorie);\n      }\n    });\n    onSelectChange({ target: { value: categoriesSet[0] } }); // Initialize with the first category\n  }\n\n  /* Declare a variable to get reference to current markers */\n  let currentMarkers: google.maps.Marker[] = [];\n  let currentInfoWindows: google.maps.InfoWindow[] = [];\n  let currentOpenInfoWindow: google.maps.InfoWindow;\n\n  /* Handle user selection */\n  function onSelectChange(event: any) {\n    currentMarkers.forEach(marker => marker.setMap(null));\n    currentMarkers = [];\n    currentInfoWindows = [];\n    const selectedValue = event.target.value;\n    const selectedFeatures = features.filter(feature => feature.properties.SOORT === selectedValue);\n    selectedFeatures.forEach(feature => {\n      const coords = feature.geometry.coordinates;\n      const latLng = new google.maps.LatLng(coords[1], coords[0]);\n      const marker = new google.maps.Marker({\n        position: latLng,\n        map: map\n      });\n      currentMarkers.push(marker);\n      const infoWindowContent = '<div>' + feature.properties.NAAM + '<br>' + feature.properties.ADRES + '</div>';\n      const infowindow = new google.maps.InfoWindow({\n        content: infoWindowContent\n      });\n      currentInfoWindows.push(infowindow);\n      marker.addListener('click', () => {\n        if (currentOpenInfoWindow) {\n          currentOpenInfoWindow.close();\n        }\n        infowindow.open(map, marker);\n        currentOpenInfoWindow = infowindow;\n      });\n    });\n    listSelectedFeatures(selectedFeatures);\n  }\n\n  /* Create the items for the list modal */\n  listModal.id = 'list-modal';\n  listModal.className = 'w3-modal';\n  viz.appendChild(listModal);\n\n  const listModalContent = document.createElement('div');\n  listModalContent.className = 'w3-modal-content';\n  listModal.appendChild(listModalContent);\n\n  const listContainer = document.createElement('div');\n  listContainer.className = 'w3-container';\n  listModalContent.appendChild(listContainer);\n\n  const closeSpan = document.createElement('span');\n  closeSpan.className = 'w3-button w3-display-topright hide-modal-button';\n  listContainer.appendChild(closeSpan);\n\n  closeSpan.innerHTML = '&times;';\n  closeSpan.addEventListener('click', () => listModal.style.display = 'none');\n\n  const list = document.createElement('div');\n  list.className = 'list-container';\n  listContainer.appendChild(list);\n\n  function listSelectedFeatures(features: Feature[]) {\n    const previousButtons = document.querySelectorAll('#list-modal button');\n    Array.prototype.forEach.call(previousButtons, (button: HTMLButtonElement) => {\n      button.parentNode.removeChild(button);\n    });\n    features.forEach((feature, i) => {\n      const button = document.createElement('button');\n      button.className = 'w3-button w3-block w3-border w3-border-dark-grey';\n      list.appendChild(button);\n      button.innerHTML = `${feature.properties.NAAM}`;\n      button.addEventListener('click', () => goToFeature(feature, i));\n    });\n  }\n\n  /* Handle user selection of an item in the modal */\n  function goToFeature(feature: Feature, i: number) {\n    const location = new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]);\n    //map.setView([feature.geometry.coordinates[1], feature.geometry.coordinates[0]], 15);\n    listModal.style.display = 'none';\n    if (currentOpenInfoWindow) {\n      currentOpenInfoWindow.close();\n    }\n    currentInfoWindows[i].open(map, currentMarkers[i]);\n    currentOpenInfoWindow = currentInfoWindows[i];\n    map.panTo(location);\n    map.setZoom(15);\n  }\n\n}\n"]}