{"version":3,"sources":["src/operaties/operaties.ts"],"names":["toggleData","thisButton","d3","select","this","otherButton","id","classed","selectAll","style","addLegend","x","y","paletteItem","legend","append","attr","color","text","description","byYear","operationValuesObj","year","label","aantal_of_per10000","wijze","value","operationWithValuesByYear","operation","years","operationValues","values","ArrayOfYearValuesObjects","map","yearValuesObject","forEach","key","format","formatLocale","decimal","thousands","grouping","currency","viz","buttons","on","palette","bigTotalChartContainer","chartContainer","marginTotal","top","right","bottom","left","widthTotal","heightTotal","xTotal","scaleTime","domain","Date","range","xAxisTotal","axisBottom","tickSizeInner","tickSizeOuter","yTotal","scaleLinear","yTotalAxis","axisLeft","ticks","tickFormat","margin","width","height","xAxis","yAxis","heightLarge","yLarge","yLargeAxis","csv","err","chart","data","absOrRel","yMax","chartHeight","chartY","chartYAxis","chartX","chartXAxis","keysForStack","keys","filter","stack","area","d","y1","y0","svg","toLowerCase","replace","enter","firstPart","split","lastPart","areaFill","call","length","modal","modalContent","header","html","table","rowLabels","row","thRow","i","showTable","dataRaw","nest","operatie","entries","unshift","slice","dataAbsolute","dataRelative","chartsAbs","chartsRel","viewBoxHeight","viewBoxWidth","viewBoxMargin","container"],"mappings":"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","file":"operaties.min.js","sourcesContent":["interface IStringTMap<T> { [key: string]: T }\ninterface IStringStringMap extends IStringTMap<string> { }\n\ninterface IOperation {\n  key: string,\n  values: IStringStringMap[]\n}\n\ntype ISelection = d3.Selection<d3.BaseType, {}, Element, {}>\n\n(function() {\n\n  const locale = d3.formatLocale({\n    decimal: ',',\n    thousands: '.',\n    grouping: [3],\n    currency: ['â‚¬', '']\n  });\n\n  const format = locale.format(',');\n\n  const viz = d3.select('#viz');\n\n  // Buttons\n  const buttons = viz.append('div')\n    .attr('id', 'buttons');\n\n  buttons.append('button')\n    .attr('id', 'abs-button')\n    .attr('class', 'w3-button w3-margin active')\n    .text('Totaal aantal')\n    .on('click', toggleData);\n\n  buttons.append('button')\n    .attr('id', 'rel-button')\n    .attr('class', 'w3-button w3-margin')\n    .text('Per 10.000 inwoners')\n    .on('click', toggleData);\n\n  function toggleData() {\n\n    let thisButton = d3.select(this);\n    let otherButton = this.id === 'abs-button' ? d3.select('#rel-button') : d3.select('#abs-button');\n\n    if (!thisButton.classed('active')) {\n      thisButton.classed('active', true);\n      otherButton.classed('active', false);\n      if (this.id === 'abs-button') {\n        d3.selectAll('.abs').style('visibility', 'visible');\n        d3.selectAll('.rel').style('visibility', 'hidden');\n      } else {\n        d3.selectAll('.abs').style('visibility', 'hidden');\n        d3.selectAll('.rel').style('visibility', 'visible');\n      }\n    }\n  }\n\n  // Legend\n  const legend = viz.append('div')\n    .attr('id', 'legend')\n    .append('svg')\n    .attr('viewBox', '0 0 320 120');\n\n  // colors from w3 flat ui colors\n  const palette = [\n    { description: 'Dagopname', color: '#f1c40f' }, // sunflower\n    { description: 'Klinisch', color: '#c0392b' }, // pomegranate\n    { description: 'Dagopname, specifiek (laparoscopisch of secundair)', color: '#f39c12' }, // orange\n    { description: 'Klinisch, specifiek (laparoscopisch of secundair)', color: '#e74c3c' } // alizarin\n  ];\n\n  function addLegend(x: number, y: number, paletteItem: IStringStringMap) {\n    legend.append('rect')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('width', 17)\n      .attr('height', 17)\n      .style('fill', paletteItem.color);\n\n    legend.append('text')\n      .attr('x', x + 20)\n      .attr('y', y + 12)\n      .style('font-size', '1.2em')\n      .text(paletteItem.description);\n  }\n\n  addLegend(4, 20, palette[0]);\n  addLegend(4, 45, palette[1]);\n  addLegend(4, 70, palette[2]);\n  addLegend(4, 95, palette[3]);\n\n  // Chart-containers\n  const bigTotalChartContainer = viz.append('div')\n    .attr('id', 'big-total-chart-container');\n  const chartContainer = viz.append('div')\n    .attr('id', 'chart-container');\n\n  // Big chart with the total\n  const marginTotal = { top: 10, right: 20, bottom: 20, left: 66 };\n  const widthTotal = 650 - marginTotal.right - marginTotal.left;\n  const heightTotal = 150 - marginTotal.top - marginTotal.bottom;\n\n  const xTotal = d3.scaleTime().domain([new Date(1995, 0, 1), new Date(2010, 0, 1)]).range([0, widthTotal]);\n  const xAxisTotal = d3.axisBottom(xTotal).tickSizeInner(6).tickSizeOuter(0);\n  const yTotal = d3.scaleLinear().range([heightTotal, 0]);\n  const yTotalAxis = d3.axisLeft(yTotal).ticks(4).tickFormat(format);\n\n  // Regular charts \n  const margin = { top: 10, right: 20, bottom: 20, left: 60 };\n  const width = 310 - margin.right - margin.left;\n  const height = 100 - margin.top - margin.bottom;\n\n  const x = d3.scaleTime().domain([new Date(1995, 0, 1), new Date(2010, 0, 1)]).range([0, width]);\n  const xAxis = d3.axisBottom(x).tickSizeInner(6).tickSizeOuter(0);\n  const y = d3.scaleLinear().range([height, 0]);\n  const yAxis = d3.axisLeft(y).ticks(3).tickSizeOuter(0).tickFormat(format);\n\n  // Chart 'Staaroperatie'\n  const heightLarge = 3 * height;\n  const yLarge = d3.scaleLinear().range([heightLarge, 0]);\n  const yLargeAxis = d3.axisLeft(yLarge).ticks(3).tickSizeOuter(0).tickFormat(format);\n\n  d3.csv('operaties-1995-2010.csv', (err, csv) => {\n\n    const dataRaw: IOperation[] = d3.nest()\n      .key((d: IStringStringMap) => d.operatie)\n      .entries(csv);\n    dataRaw.unshift({ key: dataRaw[0].key, values: dataRaw[0].values }); // Add copy of the first data object 'Alle operatieve verrichtingen' for big total chart\n    dataRaw[0].key = 'Alle operatieve verrichtingen BIG TOTAL';\n\n    const years = d3.keys(csv[0]).slice(0, 16); //this slicing cuts off the elements 'aantal_of_per10000', 'operatie' and 'wijze'. So we only keep the year-elements\n\n    const dataAbsolute = dataRaw.map(operation => ({ key: operation.key, values: operation.values.filter(d => d.aantal_of_per10000 === 'klinisch aantal' || d.aantal_of_per10000 === 'dagopname aantal') }));\n    const dataRelative = dataRaw.map(operation => ({ key: operation.key, values: operation.values.filter(d => d.aantal_of_per10000 === 'klinisch per 10000 inw' || d.aantal_of_per10000 === 'dagopname per 10000 inw') }));\n\n    const dataAbsoluteByYear: { key: string, values: {}[] }[] = dataAbsolute.map(d => operationWithValuesByYear(d, years));\n    const dataRelativeByYear: { key: string, values: {}[] }[] = dataRelative.map(d => operationWithValuesByYear(d, years));\n\n    const chartsAbs = dataAbsoluteByYear;\n    const chartsRel = dataRelativeByYear;\n\n    function chart(data: { key: string, values: { [key: string]: number | string }[] }, absOrRel: string) {\n\n      let yMax;\n      let chartHeight;\n      let chartX = x;\n      let chartXAxis = xAxis;\n      let chartY: d3.ScaleLinear<number, number>;\n      let chartYAxis;\n\n      switch (data.key) {\n        case 'Alle operatieve verrichtingen BIG TOTAL':\n          yMax = absOrRel === 'abs' ? 1500000 : 1000;\n          yTotal.domain([0, yMax]);\n          chartHeight = heightTotal;\n          chartX = xTotal;\n          chartXAxis = xAxisTotal;\n          chartY = yTotal;\n          chartYAxis = yTotalAxis;\n          break;\n        case 'Alle operatieve verrichtingen':\n          yMax = absOrRel === 'abs' ? 1500000 : 1000;\n          y.domain([0, yMax]);\n          chartHeight = height;\n          chartY = y;\n          chartYAxis = yAxis;\n          break;\n        case 'Staaroperatie':\n          yMax = absOrRel === 'abs' ? 150000 : 90;\n          yLarge.domain([0, yMax]);\n          chartHeight = heightLarge;\n          chartY = yLarge;\n          chartYAxis = yLargeAxis;\n          break;\n        default:\n          yMax = absOrRel === 'abs' ? 50000 : 30;\n          y.domain([0, yMax]);\n          chartHeight = height;\n          chartY = y;\n          chartYAxis = yAxis;\n          break;\n      }\n\n      const keysForStack = d3.keys(data.values[0]).filter(key => key !== 'year');\n      const stack = d3.stack()\n        .keys(keysForStack);\n\n      const area = d3.area()\n        .x(d => chartX(new Date(+(<any>d).data.year, 0, 0)))\n        .y1(d => chartY(d[1]))\n        .y0(d => chartY(d[0]));\n\n      const svg = d3.select('#' + data.key.toLowerCase().replace(/[\\s/,\\.]/g, '')).select('svg').select('g');\n\n      svg.append('g')\n        .attr('class', absOrRel)\n        .selectAll('path')\n        .data(() => stack(<any>data.values))\n        .enter()\n        .append('path')\n        .attr('d', d => area(d))\n        .attr('fill', d => areaFill(d.key));\n\n      svg.append('g')\n        .attr('class', 'y axis ' + absOrRel)\n        .call(chartYAxis);\n\n      // x-axis and text are identical for abs and rel data, so only add them once\n      if (absOrRel === 'abs') {\n        svg.append('g')\n          .attr('class', 'x axis')\n          .attr('transform', `translate(0, ${chartHeight})`)\n          .call(chartXAxis);\n        svg.append('text')\n          .attr('x', 6)\n          .attr('y', 8)\n          .attr('class', 'chart-label')\n          .text(data.key === 'Alle operatieve verrichtingen BIG TOTAL' ? 'Alle operatieve verrichtingen' : data.key);\n      }\n\n      svg.append('rect')\n        .attr('class', absOrRel)\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', chartX(new Date(+years[years.length - 1], 0, 1)))\n        .attr('height', chartY(0))\n        .attr('opacity', '0.0001')\n        .on('click', () => showTable(data, absOrRel));\n    }\n\n    // Create a container for each operation\n    chartsAbs.forEach(operation => {\n\n      let viewBoxHeight = height;\n      let viewBoxWidth = width;\n      let viewBoxMargin = margin;\n      let classed = 'regular-chart';\n      let container = chartContainer;\n\n      switch (operation.key) {\n        case 'Alle operatieve verrichtingen BIG TOTAL':\n          viewBoxHeight = heightTotal;\n          viewBoxWidth = widthTotal;\n          viewBoxMargin = marginTotal\n          classed = 'total-chart';\n          container = bigTotalChartContainer;\n          break;\n        case 'Staaroperatie':\n          viewBoxHeight = heightLarge;\n          classed = 'large-chart';\n          break;\n      }\n\n      container.append('div')\n        .attr('id', operation.key.toLowerCase().replace(/[\\s/,\\.]/g, ''))\n        .attr('class', 'chart ' + classed)\n        .append('svg')\n        .attr('viewBox', `0 0 ${viewBoxWidth + viewBoxMargin.left + viewBoxMargin.right} ${viewBoxHeight + viewBoxMargin.top + viewBoxMargin.bottom}`)\n        .append('g')\n        .attr('transform', `translate(${viewBoxMargin.left}, ${viewBoxMargin.top})`);\n    });\n\n    // Create the charts for each operation\n    chartsAbs.forEach(operation => chart(operation, 'abs'));\n    chartsRel.forEach(operation => chart(operation, 'rel'));\n\n    // On init hide the relative data\n    d3.selectAll('.rel').style('visibility', 'hidden');\n  });\n\n  /*  The two functions below are for wrangling the data to the form the stack function needs. The form we need is:\n  var data = [\n    {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n    {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n    ...\n  ];\n  See https://github.com/d3/d3-shape/blob/master/README.md#stacks\n  So we need data like:\n  [\n    {year: \"1995\", 'dagopname aantal&enkel': 367908, 'klinisch aantal&enkel': 678796},\n    {year: \"1996\", 'dagopname aantal&enkel': 389024, 'klinisch aantal&enkel': 666644},\n    ...      \n  ]\n  Or: \n  [\n    {year: \"1995\", 'dagopname aantal&laparoscopisch': 0, 'dagopname aantal&overig': 0, 'klinisch aantal&laparoscopisch': 40, 'klinisch aantal&overig': 10599},    \n    {year: \"1996\", 'dagopname aantal&laparoscopisch': 0, 'dagopname aantal&overig': 0, 'klinisch aantal&laparoscopisch': 37, 'klinisch aantal&overig': 11120},\n    ...      ]\n  And we need such an array for every operation, and for both absolute data and relative data.\n  */\n\n  function byYear(operationValuesObj: IStringStringMap, year: string) {\n    const label = operationValuesObj.aantal_of_per10000 + '&' + operationValuesObj.wijze;\n    const value: number = +operationValuesObj[year];\n    return { label: label, value: value };\n  }\n\n  function operationWithValuesByYear(operation: { key: string, values: Array<IStringStringMap> }, years: string[]) {\n\n    const operationValues = operation.values;\n    const ArrayOfYearValuesObjects = years.map(year => {\n      const yearValuesObject: { [key: string]: number | string } = {};\n      yearValuesObject.year = year;\n      operationValues.forEach(operationValuesObj => yearValuesObject[byYear(operationValuesObj, year).label] = +byYear(operationValuesObj, year).value);\n      // Format of yearValuesObject: {year: \"1996\", klinisch aantal&enkel: 10128, dagopname aantal&enkel: 8562}.\n      // It has a year key-value pair and can have two data key-values pairs â€“ like this one â€“ or four data key-value pairs. \n      return yearValuesObject;\n    });\n    return ({\n      key: operation.key,\n      values: ArrayOfYearValuesObjects\n    })\n  }\n\n  function areaFill(key: string) {\n    const firstPart = key.split(' ')[0];\n    const lastPart = key.split('&')[1];\n\n    if (firstPart === 'dagopname') {\n      if (lastPart === 'enkel' || lastPart === 'overig') {\n        return palette[0].color;\n      } else {\n        return palette[2].color;\n      }\n    } else { // firstPart === 'klinisch'\n      if (lastPart === 'enkel' || lastPart === 'overig' || lastPart === 'open') {\n        return palette[1].color;\n      } else {\n        return palette[3].color;\n      }\n    }\n  }\n\n  function showTable(data: { key: string, values: { [key: string]: number | string }[] }, absOrRel: string) {\n\n    const modal = viz.append('div')\n      .attr('class', 'w3-modal')\n      .style('display', 'block');\n\n    const modalContent = modal.append('div')\n      .attr('class', 'w3-modal-content');\n\n    const header = modalContent.append('div')\n      .attr('class', 'w3-container modal-header');\n\n    header.append('h5')\n      .text(data.key === 'Alle operatieve verrichtingen BIG TOTAL' ? 'Alle operatieve verrichtingen' : data.key);\n\n    header.append('p')\n      .text(absOrRel === 'abs' ? '(totaal aantal)' : '(per 10.000 inwoners)');\n\n    header.append('span')\n      .attr('class', 'w3-button w3-display-topright')\n      .on('click', () => modal.style('display', 'none'))\n      .html('&times;');\n\n    const table = modalContent.append('div')\n      .attr('class', 'w3-container')\n      .append('table')\n      .attr('class', 'w3-table-all w3-small w3-margin-top w3-margin-bottom');\n\n    const rowNames = d3.keys(data.values[0])\n    const rowLabels = rowNames.map(row =>\n      row.replace(/aantal&|per 10000 inw&/, '')\n        .replace(/year|enkel/, '')\n        .replace('laparoscopisch', 'laparo&shy;scopisch')\n        .replace('transurethraal', 'trans&shy;urethraal')\n    );\n\n    const thRow = table.append('tr');\n\n    rowLabels.forEach(label => {\n      thRow.append('th')\n        .html(label);\n    });\n\n    table.selectAll('tr')\n      .data(data.values)\n      .enter()\n      .append('tr')\n      .selectAll('td')\n      .data(d => d3.values(d))\n      .enter()\n      .append('td')\n      .text((d, i) => i > 0 ? format(+d) : d); // Don't format the first row with the year\n  }\n\n})();"]}