{"version":3,"sources":["src/koeien-varkens-kippen/koeien-varkens-kippen.ts"],"names":["draw","colors","varkens","koeien","schapen","kippen","mensen","countriesAbbrevations","Nederland","België","Denemarken","Duitsland","Frankrijk","Italië","Spanje","Verenigd Koninkrijk","viz","d3","select","selectAll","remove","timer","playAnimation","append","attr","text","on","button","this","stop","interval","flexSizes","countryChartWidthPlusMargins","animalChartWidthPlusMargins","barWidth","animalChartsPerRow","window","matchMedia","matches","height","countryChartsPerRow","maxBars","scale","legendTranslate","animalChartsPerColumn","Math","ceil","margin","chartMargin","width","floor","chartHeightPlusMargins","animalChartLeftSides","range","map","n","animalChartBottoms","animalChartBottomLeftCorners","zip","countryChartLeftSides","countryChartBottoms","countryChartBottomLeftCorners","svg","style","csv","error","data","d","country","countries","keys","animalsFromData","Object","get","filter","animals","permute","legend","enter","i","animalChartOrigins","reduce","origins","animal","x","y","countryChartOrigins","xAnimals","scaleBand","domain","rangeRound","paddingInner","xAxisAnimals","axisBottom","xCountries","scaleLinear","clamp","animalAxisContainers","call","chartLabelContainer","forEach","key","origin","anchorPoint","bars","entries","mappedData","value","datum","round","toLowerCase","barsRect","chickenNLOverflow","barsText","showByAnimal","duration","transition","delay","showByCountry","current","cachedInnerWidth","onload","innerWidth","addEventListener","newInnerWidth","resizeTimeout","setTimeout"],"mappings":"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","file":"koeien-varkens-kippen.min.js","sourcesContent":["interface IStringTMap<T> { [key: string]: T }\ninterface IStringStringMap extends IStringTMap<string> { }\n\nfunction draw() {\n\n  const colors: IStringStringMap = {\n    varkens: '#ff0097',\n    koeien: '#2d89ef',\n    schapen: '#00a300',\n    kippen: '#ffc40d',\n    mensen: '#da532c'\n  };\n\n  const countriesAbbrevations: IStringStringMap = {\n    'Nederland': 'NL',\n    'België': 'BE',\n    'Denemarken': 'DK',\n    'Duitsland': 'DE',\n    'Frankrijk': 'FR',\n    'Italië': 'IT',\n    'Spanje': 'ES',\n    'Verenigd Koninkrijk': 'GB'\n  }\n\n  const viz = d3.select('#viz');\n  viz.selectAll('div').remove(); // Since we restart on window resize or screen orientation, we must clean up previous visualisation\n\n  let timer: d3.Timer;\n  let playAnimation: () => void;\n  const duration = 3000;\n\n  // Button\n  viz.append('div')\n    .attr('id', 'button-container')\n    .append('button')\n    .attr('class', 'w3-button w3-round')\n    .text('stop animatie')\n    .on('click', function() {\n      let button = d3.select(this);\n      if (button.text() === 'stop animatie') {\n        timer.stop();\n        button.text('start animatie');\n      } else {\n        playAnimation();\n        timer = d3.interval(playAnimation, 6000);\n        button.text('stop animatie');\n      };\n    });\n\n  // Calculating the sizes for svg and charts. We give different number of rows and chart per row, depending on screen size. Values are based on visual trial and error\n  let flexSizes: { height: number, animalChartsPerRow: number, countryChartsPerRow: number, maxBars: string, scale: number, legendTranslate: number };\n  if (window.matchMedia('(max-width: 400px)').matches) {\n    flexSizes = {\n      height: 1100,\n      animalChartsPerRow: 1, // 8 bars per row\n      countryChartsPerRow: 2, // 10 bars per row > max\n      maxBars: 'country',\n      scale: 2,\n      legendTranslate: -450\n    }\n  } else if (window.matchMedia('(max-width: 600px)').matches) {\n    flexSizes = {\n      height: 825,\n      animalChartsPerRow: 2, // 16 bars per row\n      countryChartsPerRow: 3, // 15 bars per row > max\n      maxBars: 'animal',\n      scale: 1.5,\n      legendTranslate: -300\n    }\n  } else if (window.matchMedia('(max-width: 800px)').matches) {\n    flexSizes = {\n      height: 550,\n      animalChartsPerRow: 2, // 16 bars per row\n      countryChartsPerRow: 4, // 20 bars per row > max\n      maxBars: 'country',\n      scale: 1.2,\n      legendTranslate: -150\n    }\n  } else {\n    flexSizes = {\n      height: 550,\n      animalChartsPerRow: 3, // 8 bars per row\n      countryChartsPerRow: 4, // 10 bars per row > max\n      maxBars: 'animal',\n      scale: 1,\n      legendTranslate: -20\n    }\n  }\n\n  let animalChartsPerRow = flexSizes.animalChartsPerRow;\n  let animalChartsPerColumn = Math.ceil((5 / animalChartsPerRow));\n  let countryChartsPerRow = flexSizes.countryChartsPerRow;\n\n  // The overal svg margin\n  const margin = {\n    top: 0,\n    right: 10,\n    bottom: 6,\n    left: 0\n  };\n\n  //The margins for the charts within the svg\n  const chartMargin = {\n    top: 120,\n    right: 40,\n    bottom: 18,\n    left: 20\n  }\n\n  const width = 895 - margin.left - margin.right;\n  let height = flexSizes.height - margin.top - margin.bottom;\n\n  // Set value for the width of the bars: depending on which type of chart has the maximum number of bars in a row. This is indicated by flexSizes.maxBars. When we know barWidth, we can calculate the width of the other type of chart, since barWidth will be constant. \n  let countryChartWidthPlusMargins: number;\n  let animalChartWidthPlusMargins: number;\n  let barWidth: number;\n\n  if (flexSizes.maxBars === 'country') {\n    countryChartWidthPlusMargins = (width / countryChartsPerRow);\n    barWidth = Math.floor((countryChartWidthPlusMargins - chartMargin.left - chartMargin.right) / 5);\n    animalChartWidthPlusMargins = (8 * barWidth) + chartMargin.left + chartMargin.right;\n  } else {\n    animalChartWidthPlusMargins = (width / animalChartsPerRow);\n    barWidth = Math.floor((animalChartWidthPlusMargins - chartMargin.left - chartMargin.right) / 8);\n    countryChartWidthPlusMargins = (5 * barWidth) + chartMargin.left + chartMargin.right;\n  }\n\n  // Animal charts and country charts both will be in animalChartsPerColumn-number of rows. But upper row contains the extreme large NL kippen bar. Therefore upperrow gets twice the height of the bottom row. So we add 1 for an extra row. Then we get the total height of all rows.\n  const chartHeightPlusMargins = (height / (animalChartsPerColumn + 1));\n\n  // But because of 'NL kippen' bar (which we keep in upper row) we make chartBottom in lower rows extra low, hence 2 + Math.floor(...) and not 1 + Math.floor(...)\n  const animalChartLeftSides = d3.range(6).map(n => Math.floor((n % animalChartsPerRow) * animalChartWidthPlusMargins));// there are 6 animal charts\n  const animalChartBottoms = d3.range(6).map(n => (2 + Math.floor((n / animalChartsPerRow))) * chartHeightPlusMargins);\n  const animalChartBottomLeftCorners = d3.zip(animalChartLeftSides, animalChartBottoms);\n\n  const countryChartLeftSides = d3.range(8).map(n => Math.floor((n % countryChartsPerRow) * countryChartWidthPlusMargins)); // and 8 country charts\n  const countryChartBottoms = d3.range(8).map(n => (2 + Math.floor((n / countryChartsPerRow))) * chartHeightPlusMargins);\n  const countryChartBottomLeftCorners = d3.zip(countryChartLeftSides, countryChartBottoms);\n  // End of calculating sizes\n\n  // The svg (one svg will contain all the charts)\n  const svgContainer = viz.append('div')\n    .attr('id', 'svg-container')\n    .style('padding-bottom', 100 * (height + margin.top + margin.bottom) / (width + margin.left + margin.right) + '%');\n\n  const svg = svgContainer.append('svg')\n    .attr('viewBox', `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)\n    .append('g')\n    .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n  svg.append('g')\n    .attr('id', 'header')\n    .append('text')\n    .attr('transform', `scale(${flexSizes.scale}) translate(${370 + (flexSizes.legendTranslate / 1.5)},12)`)\n    .text('Aantal dieren en mensen per km2')\n    .style('text-transform', 'uppercase');\n\n  d3.csv('koeien-varkens-kippen.csv', (error, csv) => {\n    if (error) {\n      d3.select('#svg-container').remove();\n      viz.append('p')\n        .text('Er is een probleem met het laden van de data. Misschien lukt het wel als je de pagina ververst.')\n        .attr('class', 'w3-container w3-win-metro-red');\n      throw error;\n    }\n\n    const data = d3.map<IStringStringMap>(csv, d => d.country);\n    const countries = data.keys();\n    let countryObjectKeys = Object.keys(data.get(countries[0]));\n    // We change the order of the animals so that the large 'NL kippen' bar will stay in the upper row of charts:\n    let animalsFromData = countryObjectKeys.filter(d => d !== 'country' && d !== 'surface');\n    let animals = d3.permute(animalsFromData, [3, 4, 2, 1, 0]);\n\n    const legendContainter = svg.append('g')\n      .attr('id', 'legend-container')\n      .attr('transform', `scale(${flexSizes.scale}) translate(${flexSizes.legendTranslate},0)`);\n\n    const legend = legendContainter\n      .selectAll('.legend')\n      .data(animals)\n      .enter().append('g')\n      .attr('class', 'legend')\n      .attr('transform', (d, i) => `translate(0, ${i * 22})`);\n\n    legend.append('rect')\n      .attr('x', width - 38)\n      .attr('width', 18)\n      .attr('height', 18)\n      .style('fill', d => colors[d]);\n\n    legend.append('text')\n      .attr('x', width - 44)\n      .attr('y', 9)\n      .attr('dy', '.35em')\n      .style('text-anchor', 'end')\n      .style('font-size', '80%')\n      .text(d => d);\n\n    const animalChartOrigins: { [key: string]: { x: number, y: number } } = animals.reduce((origins, animal, i) => {\n      origins[animal] = {\n        x: animalChartBottomLeftCorners[i][0] + chartMargin.left,\n        y: animalChartBottomLeftCorners[i][1] - chartMargin.bottom\n      };\n      return origins;\n    }, <{ [key: string]: { x: number, y: number } }>{});\n\n    const countryChartOrigins: { [key: string]: { x: number, y: number } } = countries.reduce((origins, country, i) => {\n      origins[country] = {\n        x: countryChartBottomLeftCorners[i][0] + chartMargin.left,\n        y: countryChartBottomLeftCorners[i][1] - chartMargin.bottom\n      };\n      return origins;\n    }, <{ [key: string]: { x: number, y: number } }>{});\n\n    const xAnimals = d3.scaleBand()\n      .domain(countries.map(country => countriesAbbrevations[country]))\n      .rangeRound([0, (animalChartWidthPlusMargins - chartMargin.left - chartMargin.right)])\n      .paddingInner(0.5)\n    const xAxisAnimals = d3.axisBottom(xAnimals);\n\n    const xCountries = d3.scaleBand()\n      .domain(animals)\n      .rangeRound([0, (countryChartWidthPlusMargins - chartMargin.left - chartMargin.right)])\n      .paddingInner(0.4);\n\n    const y = d3.scaleLinear()\n      .domain([0, 1500])\n      .clamp(true)\n      .rangeRound([0, -(2 * chartHeightPlusMargins - chartMargin.top - chartMargin.bottom)]); // 2 * the height: see explanation above for the value of chartHeightPlusMargins\n\n    // For 'by animal' charts we use an axis to place labels with country abbrevations\n    // Foy 'by country' charts we manually place one label with the full country name at the bottom of the charts\n    const animalAxisContainers = svg.append('g')\n      .attr('id', 'animal-axes-container')\n      .selectAll('.animal-axis')\n      .data(animals)\n      .enter()\n      .append('g')\n      .attr('class', 'animal-axis')\n      .attr('transform', (d) => `translate(${animalChartOrigins[d].x + (flexSizes.scale * 6)}, ${animalChartOrigins[d].y})`)\n      .call(xAxisAnimals)\n      .style('font-size', (flexSizes.scale * 9.8) + 'px');\n\n    const chartLabelContainer = svg.append('g')\n      .attr('id', 'chartlabel-container');\n\n    d3.keys(countryChartOrigins).forEach(key => {\n      let origin = countryChartOrigins[key];\n      let anchorPoint = origin.x + 0.5 * (countryChartWidthPlusMargins - chartMargin.left - chartMargin.right);\n      chartLabelContainer.append('text')\n        .attr('class', 'chart-label')\n        .attr('text-anchor', 'middle')\n        .attr('x', anchorPoint)\n        .attr('y', origin.y + (16 * flexSizes.scale))\n        .style('font-size', (flexSizes.scale * 12) + 'px')\n        .text(key);\n    });\n\n    const barsContainers = svg.selectAll('.bars-container')\n      .data(data.entries())\n      .enter()\n      .append('g')\n      .attr('class', 'bars-container');\n\n    const bars = barsContainers.selectAll('g')\n      .data(d => {\n        //d is for example:\n        //{ key: 'Nederland', value: {country: 'Nederland', schapen: '1088490', koeien: '38853350', ...., surface: 33893} }\n        let mappedData = d3.map(d.value);\n        let data = mappedData.keys()\n          .filter(key => key !== 'country')\n          .map(key => ({ key: key, value: +mappedData.get(key) / +mappedData.get('surface') }))\n          .filter(d => d.key !== 'surface');\n        // data is for example: [{key: 'schapen', value: 128}, {key: 'koeien', value: 41}, ...., {key: 'mensen', value: 261}]  \n        return data;\n      })\n      .enter()\n      .append('g')\n      .datum(function(d) {\n        return {\n          country: (<{ key: string }>d3.select(<SVGElement>((<SVGElement>this).parentNode)).datum()).key,\n          animal: d.key,\n          value: Math.round(d.value)\n        };\n      })\n      .attr('class', d => `${countriesAbbrevations[d.country].toLowerCase()} ${d.animal}`);\n\n    const barsRect = bars.append('rect')\n      .attr('width', barWidth)\n      .attr('y', d => y(+d.value))\n      .attr('height', d => -y(+d.value))\n      .style('fill', d => colors[d.animal]);\n\n    const chickenNLOverflow = d3.select('.nl.kippen').append('rect')\n      .attr('width', barWidth + 2)\n      .attr('height', -y(1360))\n      .attr('y', y(1360) - 80)\n      .style('fill', colors.kippen)\n      .style('stroke', '#fff')\n      .style('stroke-width', 3);\n\n    const barsText = bars.append('text')\n      .attr('text-anchor', 'middle')\n      .attr('y', d => y(+d.value) - 8)\n      .style('font-size', (flexSizes.scale * 70) + '%')\n      .text(d => d.value !== 0 ? d.value : '?');\n\n    d3.select('.nl.kippen text')\n      .attr('dy', -55)\n      .attr('dx', -10);\n\n    let showByAnimal = (duration: number) => {\n      barsRect.transition()\n        .duration(duration)\n        .attr('x', (d: { country: string, animal: string }) => xAnimals(countriesAbbrevations[d.country]))\n        .attr('transform', (d: { country: string, animal: string }) => `translate(${animalChartOrigins[d.animal].x}, ${animalChartOrigins[d.animal].y})`);\n\n      chickenNLOverflow.transition()\n        .duration(duration)\n        .attr('x', xAnimals('NL') - 12)\n        .attr('transform', `translate(${animalChartOrigins['kippen'].x}, ${animalChartOrigins['kippen'].y})`);\n\n      barsText.transition()\n        .duration(duration)\n        .attr('x', (d: { country: string, animal: string }) => xAnimals(countriesAbbrevations[d.country]) + barWidth / 2)\n        .attr('transform', (d: { country: string, animal: string }) => `translate(${animalChartOrigins[d.animal].x}, ${animalChartOrigins[d.animal].y})`);\n\n      animalAxisContainers.transition()\n        .delay(0.5 * duration)\n        .duration(0.5 * duration)\n        .style('opacity', 1);\n\n      chartLabelContainer\n        .transition()\n        .duration(0.5 * duration)\n        .style('opacity', 0);\n    }\n\n    let showByCountry = (duration: number) => {\n      barsRect.transition()\n        .duration(duration)\n        .attr('x', (d: { country: string, animal: string }) => xCountries(d.animal))\n        .attr('transform', (d: { country: string, animal: string }) => `translate(${countryChartOrigins[d.country].x}, ${countryChartOrigins[d.country].y})`);\n\n      chickenNLOverflow.transition()\n        .duration(duration)\n        .attr('x', xCountries('kippen') - 12)\n        .attr('transform', `translate(${countryChartOrigins['Nederland'].x}, ${countryChartOrigins['Nederland'].y})`);\n\n      barsText.transition()\n        .duration(duration)\n        .attr('x', (d: { country: string, animal: string }) => xCountries(d.animal) + (barWidth / 2))\n        .attr('transform', (d: { country: string, animal: string }) => `translate(${countryChartOrigins[d.country].x}, ${countryChartOrigins[d.country].y})`);\n\n      animalAxisContainers.transition()\n        .duration(0.5 * duration)\n        .style('opacity', 0);\n\n      chartLabelContainer\n        .transition()\n        .delay(0.5 * duration)\n        .duration(0.5 * duration)\n        .style('opacity', 1);\n    }\n\n    showByCountry(0);\n    showByAnimal(duration)\n    let current = 'byAnimal';\n\n    playAnimation = () => {\n      if (current === 'byCountry') {\n        showByAnimal(duration);\n        current = 'byAnimal';\n      } else {\n        showByCountry(duration);\n        current = 'byCountry';\n      }\n    }\n\n    timer = d3.interval(playAnimation, 6000);\n  });// end of d3.csv()\n\n};// end of draw()\n\n// Resize and screen orientation logic\nlet cachedInnerWidth: number;\n\nwindow.onload = () => {\n  draw();\n  cachedInnerWidth = window.innerWidth;\n};\n\n// We use a resize throttler, to prevent continuous calling of draw() during resizing\n// We also store window.innerWidth, because mobile devices resize window vertically when scrolling (showing and hiding the browser tabs), but then draw() should NOT called\n(function() {\n  window.addEventListener('resize', resizeThrottler, false);\n\n  let resizeTimeout: any;\n  function resizeThrottler() {\n    let newInnerWidth = window.innerWidth;\n    // ignore resize events as long as an actualResizeHandler execution is in the queue\n    if (!resizeTimeout && newInnerWidth !== cachedInnerWidth) {\n      resizeTimeout = setTimeout(function() {\n        resizeTimeout = null;\n        cachedInnerWidth = window.innerWidth;\n        actualResizeHandler();\n\n        // The actualResizeHandler will execute at a rate of 4fps\n      }, 250);\n    }\n  }\n\n  function actualResizeHandler() {\n    draw();\n  }\n\n  window.addEventListener('orientationchange', function() {\n    cachedInnerWidth = window.innerWidth;\n    draw();\n  });\n\n}());\n"]}