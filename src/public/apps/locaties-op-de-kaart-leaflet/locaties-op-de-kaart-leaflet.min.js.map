{"version":3,"sources":["src/locaties-op-de-kaart-leaflet/locaties-op-de-kaart-leaflet.ts"],"names":["capitalize","string","charAt","toUpperCase","slice","presentData","res","features","JSON","parse","featureCollection","type","categoriesSet","map","feature","properties","SOORT","reduce","a","b","indexOf","push","forEach","categorie","option","L","DomUtil","create","selectControl","getContainer","firstChild","setAttribute","labelDict","textContent","onSelectChange","target","value","createSelectMenu","event","selectedValue","geojsonLayer","removeLayer","selectedFeatures","filter","selectedFeaturesCollection","geoJSON","onEachFeature","addTo","previousButtons","document","querySelectorAll","Array","prototype","call","button","parentNode","removeChild","i","list","innerHTML","NAAM","addEventListener","setView","geometry","coordinates","listModal","style","display","getLayers","openPopup","goToFeature","listSelectedFeatures","layer","bindPopup","ADRES","super","slager","bakker","vis","groenten","kaas","dranken","toko","koffie","biologisch","markt","viz","getElementById","mapContainer","center","layers","tileLayer","attribution","zoom","attributionControl","setPrefix","Control","extend","onAdd","selectControlDiv","selectElement","DomEvent","disableClickPropagation","on","onRemove","position","req","XMLHttpRequest","open","onreadystatechange","readyState","status","responseText","console","log","send","id","listModalContent","listContainer","closeSpan"],"mappings":"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","file":"locaties-op-de-kaart-leaflet.min.js","sourcesContent":["(function() {\n\n  /* Helpers */\n  interface Feature { type: string, geometry: any, properties: { ADRES: string, NAAM: string, SOORT: string } }\n\n  const labelDict = {\n    super: 'supermarkt',\n    slager: 'slager',\n    bakker: 'bakker, banketbakker',\n    vis: 'vis',\n    groenten: 'groenten en fruit',\n    kaas: 'kaas',\n    dranken: 'slijterij',\n    toko: 'toko',\n    koffie: 'koffie en thee',\n    biologisch: 'biologische voeding',\n    markt: 'markt'\n  };\n\n  function capitalize(string: string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /* Create map container */\n  const viz = document.getElementById('viz');\n  const mapContainer = L.DomUtil.create('div', '', viz);\n\n  /* Add map */\n  const map = L.map(mapContainer, {\n    center: [51.974, 5.667],\n    layers: [\n      L.tileLayer(\n        'https://geodata.nationaalgeoregister.nl/tiles/service/wmts/brtachtergrondkaart/EPSG:3857/{z}/{x}/{y}.png', {\n          attribution: 'NLMaps Â© Kadaster'\n        }\n      )\n    ],\n    zoom: 14\n  });\n\n  /* Remove Leaflet attributie */\n  const attrControl = (<any>map).attributionControl;\n  attrControl.setPrefix('');\n\n  /* Create div element for a modal in which we can list the selected items. */\n  const listModal = L.DomUtil.create('div', 'list-modal w3-modal', viz);\n\n  /*  Create Leaflet custom control with select menu. And a button to display the modal. */\n  const SelectControl = L.Control.extend({\n    onAdd: (map: L.Map) => {\n      const selectControlDiv = L.DomUtil.create('div', 'select-control');\n      const selectElement = L.DomUtil.create('select', 'select-element', selectControlDiv);\n      L.DomEvent.disableClickPropagation(selectElement); // NOTE: Without this, tapping the select menu in Firefox on Android doesn't work! AND: It prevents unwanted dragging in Firefox when mouse leaves selectmenu without changing current option!\n      L.DomEvent.on(selectElement, 'change', onSelectChange)\n      const button = L.DomUtil.create('button', 'select-button', selectControlDiv);\n      button.textContent = 'Toon selectie in lijst';\n      button.addEventListener('click', () => listModal.style.display = 'block');\n      return selectControlDiv;\n    },\n    onRemove: (map: L.Map) => { }\n  });\n  const selectControl = new SelectControl({ position: 'topright' });\n  selectControl.addTo(map);\n\n  /* Get the data */\n  const req = new XMLHttpRequest();\n  req.open(\"GET\", \"locaties-op-de-kaart.geojson\", true);\n  req.onreadystatechange = function() {\n    if (req.readyState === 4) {\n      if (req.status === 200) {\n        presentData(req.responseText);\n      } else {\n        console.log('Error ' + req.status + ', text: ' + req.responseText);\n      }\n    }\n  };\n  req.send();\n\n  /* Declare variable that will make data globally available */\n  let featureCollection: { type: string, features: Feature[] };\n\n  /* Make the data  available and call createSelectMenu */\n  function presentData(res: string) {\n    const json = JSON.parse(res);\n    const features = json.features;\n    featureCollection = { type: '', features: features }\n    createSelectMenu();\n  }\n\n  /* Create the select menu and initialize it */\n  function createSelectMenu() {\n    const features = featureCollection.features;\n    const categories = features.map(feature => feature.properties.SOORT);\n    const categoriesSet = categories.reduce((a, b) => {\n      if (a.indexOf(b) < 0) {\n        a.push(b)\n      };\n      return a;\n    }, []);\n    categoriesSet.forEach(categorie => {\n      const option = L.DomUtil.create('option', '', selectControl.getContainer().firstChild);\n      option.setAttribute('value', categorie);\n      if ((<any>labelDict)[categorie]) {\n        option.textContent = capitalize((<any>labelDict)[categorie]);\n      } else {\n        option.textContent = capitalize(categorie);\n      }\n    });\n    onSelectChange({ target: { value: categoriesSet[0] } }); // Initialize with the first category\n  }\n\n  /* Declare a variable to get reference to current geojson layer */\n  let geojsonLayer: L.GeoJSON;\n\n  /* Handle user selection */\n  function onSelectChange(event: any) {\n    const selectedValue = event.target.value;\n    if (geojsonLayer) {\n      map.removeLayer(geojsonLayer);\n    }\n    const selectedFeatures = featureCollection.features.filter(feature => feature.properties.SOORT === selectedValue);\n    const selectedFeaturesCollection = { type: '', features: selectedFeatures };\n    geojsonLayer = L.geoJSON(selectedFeaturesCollection, (<any>{\n      onEachFeature: onEachFeature\n    })).addTo(map);\n    listSelectedFeatures(selectedFeatures);\n\n    // Leaflet alternative for filtering. We don't use it here because we also need a list of selected items to show in list modal  \n    /*  geojsonLayer = L.geoJSON(featureCollection, (<any>{\n        onEachFeature: onEachFeature,\n        filter: (feature: Feature, layer: L.Layer) => filterFeatures(feature, layer, selectedValue)\n      })).addTo(map);*/\n  }\n\n  function onEachFeature(feature: Feature, layer: L.Layer) {\n    layer.bindPopup('<div>' + feature.properties.NAAM + '<br>' + feature.properties.ADRES + '</div>');\n  }\n\n  /*function filterFeatures(feature: Feature, layer: L.Layer, selectedValue: string) {\n    return feature.properties.SOORT === selectedValue;\n  }*/\n\n  /* Create the items for the list modal */\n  listModal.id = 'list-modal';\n  const listModalContent = L.DomUtil.create('div', 'w3-modal-content', listModal);\n  const listContainer = L.DomUtil.create('div', 'w3-container', listModalContent);\n  const closeSpan = L.DomUtil.create('span', 'w3-button w3-display-topright hide-modal-button', listContainer);\n  closeSpan.innerHTML = '&times;';\n  closeSpan.addEventListener('click', () => listModal.style.display = 'none');\n  const list = L.DomUtil.create('div', 'list-container', listContainer);\n\n  function listSelectedFeatures(features: Feature[]) {\n    const previousButtons = document.querySelectorAll('#list-modal button');\n    Array.prototype.forEach.call(previousButtons, (button: HTMLButtonElement) => {\n      button.parentNode.removeChild(button);\n    });\n    features.forEach((feature, i) => {\n      const button = L.DomUtil.create('button', 'w3-button w3-block w3-border w3-border-dark-grey', list);\n      button.innerHTML = `${feature.properties.NAAM}`;\n      button.addEventListener('click', () => goToFeature(feature, i));\n    })\n  }\n\n  /* Handel user selection of an item in the modal */\n  function goToFeature(feature: Feature, i: number) {\n    map.setView([feature.geometry.coordinates[1], feature.geometry.coordinates[0]], 15);\n    listModal.style.display = 'none';\n    geojsonLayer.getLayers()[i].openPopup();\n  }\n\n})();\n"]}